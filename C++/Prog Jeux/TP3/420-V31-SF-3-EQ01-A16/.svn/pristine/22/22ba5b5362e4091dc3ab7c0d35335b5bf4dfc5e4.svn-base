#define _USE_MATH_DEFINES
#include "Projectile.h"


Projectile::Projectile(int _speed, int _attackPoints, int _range, float _angle, bool _isAlly) : speed(_speed), attackPoints(_attackPoints), range(_range),
angle(_angle), isAlly(_isAlly)
{
	setSize(Vector2f(attackPoints-30, 5));
	setOrigin(getSize().x / 2, getSize().y / 2);
	setRotation(360 * angle / (2 * M_PI));
	if (isAlly)
	{
		setFillColor(Color::Blue);
	}
	else
	{
		setFillColor(Color::Red);
	}
	totalDistanceGone = 0;
}
Projectile::~Projectile()
{

}
/// <summary>
/// déplace le projectile et s'il est allé trops loin on retourne vrai pour dire qu'il ne devrais plus exister
/// </summary>
/// <returns>vrai si le projevtile est allé au bout de sa portée et ne devrais plus exister, sionon faux</returns>
//Alex
bool Projectile::update()
{
	bool isOk = true;
	if (totalDistanceGone >= range)
	{
		isOk = true;
	}
	else
	{
		isOk = false;
	}
	move(cos(angle) * speed,sin(angle) * speed);
	totalDistanceGone += speed;
	return isOk;
}

int Projectile::getSpeed()
{
	return speed;
}
int Projectile::getAttackPoints()
{
	return attackPoints;
}
int Projectile::getRange()
{
	return range;
}
float Projectile::getAngle()
{
	return angle;
}
bool Projectile::getIsAlly()
{
	return isAlly;
}
float Projectile::getTotalDisatanceGone()
{
	return totalDistanceGone;
}
