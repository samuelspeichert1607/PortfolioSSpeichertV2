#include "ObjetDeJeu.h"


//Sam
ObjetDeJeu::ObjetDeJeu(const Vector2f& taille, const Vector2f& position, const Color& couleur, int animationMaximale) 
	: demiTailleX(taille.x / 2), demiTailleY(taille.y / 2), position(position), couleur(couleur), ANIMATION_MAXIMALE(animationMaximale), 
	animation(0), actif(false)
{

}
//Sam
bool ObjetDeJeu::estTermine() const
{
	return animation >= ANIMATION_MAXIMALE;
}
//Sam
bool ObjetDeJeu::collisionClick(const Vector2i& position) const
{
	if (abs(position.x - this->position.x) < demiTailleX && abs(position.y - this->position.y) < demiTailleY)
	{
		return true;
	}
	return false;
}
//Sam
void ObjetDeJeu::activer()
{
	actif = true;
}
//Sam
Color& ObjetDeJeu::getCouleur()
{
	return couleur;
}
//Sam
Vector2f& ObjetDeJeu::getPosition()
{
	return position;
}
//Sam
int ObjetDeJeu::getID() const
{
	return ID;
}




///Surcharges d'opérateurs
//Sam
bool ObjetDeJeu::operator < (const ObjetDeJeu& objetDeJeu)
{
	return this->ID < objetDeJeu.ID;
}
//Sam
bool ObjetDeJeu::operator >(const ObjetDeJeu& objetDeJeu)
{
	return this->ID > objetDeJeu.ID;
}
//Sam
bool ObjetDeJeu::operator >= (const ObjetDeJeu& objetDeJeu)
{
	return this->ID >= objetDeJeu.ID;
}
//Sam
bool ObjetDeJeu::operator <= (const ObjetDeJeu& objetDeJeu)
{
	return this->ID <= objetDeJeu.ID;
}
//Sam
bool ObjetDeJeu::operator == (const ObjetDeJeu& objetDeJeu)
{
	return this->ID == objetDeJeu.ID;
}
//Sam
bool ObjetDeJeu::operator != (const ObjetDeJeu& objetDeJeu)
{
	return this->ID != objetDeJeu.ID;
}