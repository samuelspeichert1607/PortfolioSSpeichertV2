#define _USE_MATH_DEFINES

#include "Game.h"
#include <iostream>
#include <math.h>
#include <vector>
#include <algorithm>

#include "SpawnerFixe.h"
#include "SpawnerRandom.h"
#include "SpawnerCollectible.h"
#include "Collectible.h"

using namespace std;
using namespace platformer;

Game::Game()
{
	//On place dans le contructeur ce qui permet à la game elle-même de fonctionner

	mainWin.create(VideoMode(LARGEUR, HAUTEUR, 32), "Jeu de Plateforme");  // , Style::Titlebar); / , Style::FullScreen);
	//view = mainWin.getDefaultView();


	view = View(sf::FloatRect(0, 0, LARGEUR, HAUTEUR)); //Largeur et hauteur de votre résolution d’écran 
	view.setCenter(LARGEUR / 2, HAUTEUR / 2);
	mainWin.setView(view); //Comme la vue est reçu en référence, la manipuler va influencer ce qu’on a à l’écran

	//Synchonisation coordonnée à l'écran!  Normalement 60 frames par secondes
	//À faire absolument
	mainWin.setFramerateLimit(60);
	//mainWin.setVerticalSyncEnabled(true); //Équivalent... normalement
	score = 0;
}


Game::~Game()
{
	//SSPEICHERT
	delete player;
	delete backgroundSky;
	delete backgroundSkyT;
	delete[]background;
	delete[]backgroundT;
	//SSPEICHERT
}


int Game::run()
{
	if (!init())
	{
		return EXIT_FAILURE;
	}

	while (mainWin.isOpen())
	{
		getInputs();
		update();
		draw();
	}

	unload();

	return EXIT_SUCCESS;
}

bool Game::init()
{
	//JCOTE
	//TODO: créer une classe parent pour le background et les blocs.
	backgroundT = new Texture[numBackground];
	background = new Sprite[numBackground];
	backgroundSkyT = new Texture;
	backgroundSky = new Sprite;

	if (!backgroundSkyT->loadFromFile("Content\\Backgrounds\\Layer0_2.png"))
	{
		return false;
	}
	if (!backgroundT[0].loadFromFile("Content\\Backgrounds\\Layer1_0.png"))
	{
		return false;
	}
	if (!backgroundT[1].loadFromFile("Content\\Backgrounds\\Layer1_1.png"))
	{
		return false;
	}
	if (!backgroundT[2].loadFromFile("Content\\Backgrounds\\Layer1_2.png"))
	{
		return false;
	}

	//setTexture
	backgroundSky->setTexture(*backgroundSkyT);
	for (size_t i = 0; i < numBackground; i++)
	{
		background[i].setTexture(backgroundT[i]);
	}

	//setPosition
	backgroundSky->setPosition(0, 0);
	background[0].setPosition(-LARGEUR, 0);
	background[1].setPosition(0,0);
	background[2].setPosition(LARGEUR,0);

	//SSpeichert et JCote
	//création des blocks
	BlockBuilder("Content\\Levels\\testlevel.txt", "Content\\Tiles\\BlockA0.png");
	//SSpeichert et JCote


	

	//création du joueur
	
	/*Player *player2 = new Player(32, 32, &mainWin);
	player->chargerTextures("Content\\Sprites\\Player\\Idle.png");
	player->ajustementsVisuels();
	
	Block* block2 = new Block();
	block2->Init( 32, 32, &mainWin);
	block2->chargerTextures("Content\\Tiles\\BlockA0.png");
	block2->ajustementsVisuels();

	testCollisionBoxes3(*player2, *block2);*/

	//player->setOrigin(player->texture.getSize().x / 2, player->texture.getSize().y / 2);
	//view.setCenter(player->getPosition().x, player->getPosition().y);


//	
//||||||| .r7
	//création du joueur
	
	//player->setOrigin(32, 32);
	
	//view.setCenter(player->getPosition().x, player->getPosition().y);


	
//=======
//>>>>>>> .r9
	//.. init ennemis
	//.. AjustementsVisuels
	
	//JCOTE
	return true;
}

void Game::getInputs()
{
	//On passe l'événement en référence et celui-ci est chargé du dernier événement reçu!
	while (mainWin.pollEvent(event))
	{
		//x sur la fenêtre
		if (event.type == Event::Closed)
		{
			mainWin.close();
		}
	}
	//JCOTE
	//pour les déplacements du joueur.
	if (Keyboard::isKeyPressed(Keyboard::Right))
	{
			if (player->getPosition().x <= view.getCenter().x + (LARGEUR / 2)-(player->LARGEUR_PLAYER))
			{
				player->deplacement(true);
			}
	}
	if (Keyboard::isKeyPressed(Keyboard::Left))
	{
			if (player->getPosition().x >= view.getCenter().x - (LARGEUR / 2))
			{
				player->deplacement(false);
			}
	}
	//JCOTE

	//SSPEICHERT
	if (Keyboard::isKeyPressed(Keyboard::Up) &&  can_jump == true) //
	{
		player->jump();
		can_jump = false;
		//TODO: Calcul du Jump
	}
	//SSPEICHERT
}

void Game::update()
{
//<<<<<<< .mine
//	for (int i = 0; i < 20; i++)
//	{
//		if (!(player->getGlobalBounds().intersects(block->getGlobalBounds())))
//		{
//			player->setPosition(player->getPosition().x, __min(player->getPosition().y + VITESSE, block->getPosition().y - player->getOrigin().y)); //
//		}
//
//	}
//||||||| .r7
//	//for (int i = 0; i < 20; i++)
//	//{
//	//	if (!(player->getGlobalBounds().intersects(block[i]->getGlobalBounds())))
//	//	{
//	//		player->setPosition(player->getPosition().x, __min(player->getPosition().y + VITESSE, block[i]->getPosition().y - player->getOrigin().y)); //
//	//	}
//	//	else
//	//	{
//	//		player->setPosition(player->getPosition().x, player->getPosition().y);
//	//	}
//	//	
//	//}
//=======
	

	//view.setCenter(player->getPosition().x + (LARGEUR/4), HAUTEUR/2);
	if (view.getCenter().x - (LARGEUR / 2) != -LARGEUR && view.getCenter().x + (LARGEUR / 2) != (LARGEUR*2))
	{
		view.setCenter(player->getPosition().x + (LARGEUR/4), HAUTEUR/2);
	}
	else if (player->getPosition().x > view.getCenter().x - (LARGEUR / 4))
	{
		view.setCenter(player->getPosition().x + (LARGEUR / 4), HAUTEUR / 2);
	}
	
	//player->setOrigin(player->texture.getSize().x / 2, player->texture.getSize().y / 2);
	//TOFIX: ramène  toujours le personnage en bas completement de l'écran.
	/*for (int i = 0; i < 20; i++)
	{
		if (!(player->getGlobalBounds().intersects(block[i]->getGlobalBounds())))
		{
			player->setPosition(player->getPosition().x, __min(player->getPosition().y + VITESSE, block[i]->getPosition().y - player->getOrigin().y));
		}
		
	}*/
	view.setCenter(player->getPosition().x + (LARGEUR/4), HAUTEUR/2);


	//Pour la gravité

	//if (!VerifierCollisionBlock())
	if (!VerifierCollisionBlock() )
	{
		player->update();
		can_jump = false;
		
	}
	else
	{
		player->stop();
		can_jump = true;
		//player->setPosition(player->getPosition().x, patate);
	}

	VerifierCollisionCollectable();

	vector<Ennemy>::iterator iterEnnemy;
	for (iterEnnemy = ennemyList.begin(); iterEnnemy < ennemyList.end(); iterEnnemy++)
	{
		iterEnnemy->deplacement(true);
		if (typeid(*iterEnnemy) == typeid(Goomba))
		{
			iterEnnemy->update();
		}
	}

	vector<Collectible>::iterator iterCollectible;
	for (iterCollectible = collectibleList.begin(); iterCollectible < collectibleList.end(); iterCollectible++)
	{
		iterCollectible->update();
	}

	//for (iter = blockList.begin(); iter < blockList.end(); iter++)
	//{
	//	if (!(player->getGlobalBounds().intersects(iter->getGlobalBounds())))
	//	{
	//		player->setPosition(player->getPosition().x, player->getPosition().y + VITESSE);
	//	}
	//}
	//vector<Block>::const_iterator iter;
	//
	//Collider collide(*player, *iter);

	//merged

	//for (int i = 0; i < 20; i++)
	//{
	//	if (!(player->getGlobalBounds().intersects(block[i]->getGlobalBounds())))
	//	{
	//		player->setPosition(player->getPosition().x, __min(player->getPosition().y + VITESSE, block[i]->getPosition().y - player->getOrigin().y)); //
	//	}
	//	else
	//	{
	//		player->setPosition(player->getPosition().x, player->getPosition().y);
	//	}
	//	
	//}

	//merged end

	verifierMortPlayer();
}

void Game::draw()
{
	mainWin.clear();
	//JCOTE
	mainWin.setView(view);
	backgroundSky->setPosition((view.getCenter().x)-(LARGEUR/2), (view.getCenter().y)-(HAUTEUR/2));
	mainWin.draw(*backgroundSky);

	for (size_t i = 0; i < numBackground; i++)
	{
		//vérification si le background se trouve dans la zone d'affichage et vaut la peine d'être affiché.
		if (background[i].getPosition().x < (view.getCenter().x) + (LARGEUR / 2) && background[i].getPosition().x + LARGEUR > (view.getCenter().x)-(LARGEUR/2))

		{
			mainWin.draw(background[i]);
		}	
	}
	//JCOTE
	
	//SSPEICHERT

	vector<Block>::const_iterator iter;
	for ( iter = blockList.begin(); iter < blockList.end(); iter++)
	{
		mainWin.draw(*iter);
	}

	vector<Ennemy>::const_iterator iterEnnemy;
	for (iterEnnemy = ennemyList.begin(); iterEnnemy < ennemyList.end(); iterEnnemy++)
	{
		mainWin.draw(*iterEnnemy);
	}

	vector<Collectible>::const_iterator iterCollectible;
	for (iterCollectible = collectibleList.begin(); iterCollectible < collectibleList.end(); iterCollectible++)
	{
		mainWin.draw(*iterCollectible);
	}

	mainWin.draw(*player);
	//SSPEICHERT
	mainWin.display();
}

void Game::unload()
{
	//JCOTE
	
	blockList.clear();
	ennemyList.clear();
	collectibleList.clear();
	score = 0;
	
	BlockBuilder("Content\\Levels\\testlevel.txt", "Content\\Tiles\\BlockA0.png");
	//JCOTE
}

// code pris ici : http://stackoverflow.com/questions/6083626/box-collision-code
bool Game::testCollisionBoxes(int x, int y, int oWidth, int oHeight, int xTwo, int yTwo, int oTwoWidth, int oTwoHeight)
{
	if (x + oWidth < xTwo || x > xTwo + oTwoWidth) return false;
	if (y + oHeight < yTwo || y > yTwo + oTwoHeight) return false;

	return true;
}

//SSPEICHERT
bool Game::testCollisionBoxes2(Sprite spr1, Sprite spr2)
{
	IntRect r1(spr1.getPosition().x - spr1.getTexture()->getSize().x / 2, spr1.getPosition().y - spr1.getTexture()->getSize().y / 2, spr1.getTexture()->getSize().x, spr1.getTexture()->getSize().y);
	IntRect r2(spr2.getPosition().x - spr2.getTexture()->getSize().x / 2, spr2.getPosition().y - spr2.getTexture()->getSize().y / 2, spr2.getTexture()->getSize().x, spr2.getTexture()->getSize().y);
	
	return r1.intersects(r2);

	//return spr1.getTextureRect().intersects(spr2.getTextureRect());

	//if (spr1.getTextureRect().intersects(spr2.getTextureRect()))
	//	return true;
	//else
	//	return false;
}
//SSPEICHERT

void Game::BlockBuilder(const char levelPath[], const char BlockTPath[])
{
	LevelManager level(levelPath);
	string * strLevel = level.getLevel();


	for (int i = 0; i < (HAUTEUR / 32); i++)
	{
		for (int j = 0; j < (LARGEUR / 32); j++)
		{
			if (strLevel[i][j] == '1')
			{
				Block block;
				block.Init(j * block.LARGEUR_BLOCK, i * block.LARGEUR_BLOCK, &mainWin);
				if (blockList.empty())
				{
					block.chargerTextures(BlockTPath);
				}
				block.ajustementsVisuels();
				//block.setOrigin(16, 16);
				blockList.push_back(block);

			}
			if (strLevel[i][j] == '2')
			{
				if (player == NULL)
				{
					player = new Player(j * 32, i * 32, &mainWin);
					//en attendant l'animation
					player->chargerTextures("Content\\Sprites\\Player\\Idle.png"); 
					player->ajustementsVisuels();
					player->setOrigin(player->getTexture()->getSize().x / 2, player->getTexture()->getSize().y / 2);
				}
			}
			if (strLevel[i][j] == '3')
			{
				SpawnerFixe * spawner = new SpawnerDeGoomba();
				Ennemy * ennemi1 = spawner->FabriquerEnnemy(j * 32, i * 32, &mainWin);
				
		//		if (ennemyList.empty())
		//		{
					ennemi1->chargerTextures("Content\\Tiles\\BlockA0.png");
		//		}


				ennemi1->setColor(Color::Blue);
				ennemi1->ajustementsVisuels();
				ennemi1->setOrigin(16, 16);
				ennemyList.push_back(*ennemi1);
			}
			if (strLevel[i][j] == '4')
			{
				Ennemy * ennemi2 = SpawnerRandom::CreateEnnemy(SpawnerRandom::cleverGoomba, j * 32, i * 32, &mainWin);
				ennemi2->chargerTextures("Content\\Tiles\\BlockA0.png");
			 	ennemi2->setColor(Color::Magenta);
				ennemi2->ajustementsVisuels();
				ennemi2->setOrigin(16, 16);
				ennemyList.push_back(*ennemi2);
			}
			if (strLevel[i][j] == '5')
			{
				Ennemy * ennemi3 = SpawnerRandom::CreateEnnemy(SpawnerRandom::paraGoomba, j * 32, i * 32, &mainWin);
				ennemi3->chargerTextures("Content\\Tiles\\BlockA0.png");
				ennemi3->setColor(Color::Green);
				ennemi3->ajustementsVisuels();
				ennemi3->setOrigin(16, 16);
				ennemyList.push_back(*ennemi3);
			}
			if (strLevel[i][j] == '6')
			{
				SpawnerCollectible * spawnerD = new SpawnerDiamond();
				Collectible * collectible = spawnerD->FabriqueCollectible(j * 32, i * 32, &mainWin);
				collectible->chargerTextures("Content\\Sprites\\Gem.png");
				collectibleList.push_back(*collectible);
			}
		}
	}
}

bool Game::VerifierCollisionBlock()
{
	vector<Block>::const_iterator iter;
	for (iter = blockList.begin(); iter < blockList.end(); iter++)
	{
		if (iter->getPosition().x > 0 && iter->getPosition().x < LARGEUR && iter->getPosition().y > 0 && iter->getPosition().y < HAUTEUR)
		{
			if (testCollisionBoxes2(*player, *iter) && player->getPosition().y - player->getTexture()->getSize().y/2 < iter->getPosition().y)
			{
				player->setPosition(player->getPosition().x, iter->getPosition().y  - (iter->getTexture()->getSize().y)); //Ceci stabilise la position du joueur au dessus de la plateforme!
				return true;
			}		
		}
	}
}

bool Game::VerifierCollisionCollectable()
{
	vector<Collectible>::iterator iter;
	for (iter = collectibleList.begin(); iter < collectibleList.end(); iter++)
	{
		if (iter->getPosition().x > 0 && iter->getPosition().x < LARGEUR && iter->getPosition().y > 0 && iter->getPosition().y < HAUTEUR)
		{
			if (testCollisionBoxes2(*player, *iter) && player->getPosition().y - player->getTexture()->getSize().y / 2 < iter->getPosition().y)
			{
				score += iter->getValue();
				iter->setPosition(INT_MAX, INT_MAX);
				return true;
			}
		}
	}
}

bool Game::verifierMortPlayer()
{
	if (player->getPosition().y > HAUTEUR && player->getNbLife()>0)
	{
		player->retriveLife();
		player->setPosition(player->startPositionX,player->startPositionY);
		return true;
	}
	else if (player->getNbLife()<=0)
	{
		mainWin.close();
	}
	return false;
}

//à supprimer
bool Game::testCollisionBoxes3(Player *spr1, vector<Block>::const_iterator spr2)
{
	if (spr1->getPosition().x + spr1->getTexture()->getSize().x >= spr2->getPosition().x &&
		spr1->getPosition().x <= spr2->getPosition().x + spr2->getTexture()->getSize().x &&
		spr1->getPosition().y + spr1->getTexture()->getSize().y  >= spr2->getPosition().y &&
		spr1->getPosition().y <= spr2->getPosition().y + spr2->getTexture()->getSize().y)
	{
		return true;
	}
	return false;
}