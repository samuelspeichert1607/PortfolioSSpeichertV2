#include "Acteur.h"

using namespace platformer;
//Texture Acteur::texture;



Acteur::Acteur(const float posX, const float posY, RenderWindow* const renderWindow) : renderWindow(renderWindow), cadran(6), animateur(0), animateurImmobile(0), directionImmobile(1), estMobile(false),startPositionX(posX),
startPositionY(posY)
{
	setPosition(posX, posY);
	etat = DIRECTIONS::IMMOBILE;
	isDead = false;
}

Acteur::~Acteur()
{

}

bool Acteur::chargerTextures(const char texturePath[])
{
	if (!texture.loadFromFile(texturePath))
	{
		return false;
	}

	texture.setSmooth(false);
	return true;
}

void Acteur::ajustementsVisuels()
{
	setTexture(texture);
	//Pour l'animation
	/*intRects = new IntRect*[];

	int hauteur = texture.getSize().y / NBR_NIVEAUX;

	for (size_t i = 0; i < NBR_ANIMS_IMMOBILE; i++)
	{
		int largeur = texture.getSize().x / NBR_ANIMS_IMMOBILE;
		intRects[0][i].left = largeur * i;
		intRects[0][i].top = hauteur * i;
		intRects[0][i].width = largeur;
		intRects[0][i].height = hauteur;
	}

	for (size_t i = 0; i < NBR_ANIMS_MOUVEMENT; i++)
	{
		int largeur = texture.getSize().x / NBR_ANIMS_MOUVEMENT;
		intRects[1][i].left = largeur * i;
		intRects[1][i].top = hauteur * i;
		intRects[1][i].width = largeur;
		intRects[1][i].height = hauteur;
	}

	for (size_t i = 0; i < NBR_ANIMS_JUMP; i++)
	{
		int largeur = texture.getSize().x / NBR_ANIMS_JUMP;
		intRects[2][i].left = largeur * i;
		intRects[2][i].top = hauteur * i;
		intRects[2][i].width = largeur;
		intRects[2][i].height = hauteur;
	}

	for (size_t i = 0; i < NBR_ANIMS_MORT; i++)
	{
		int largeur = texture.getSize().x / NBR_ANIMS_MORT;
		intRects[3][i].left = largeur * i;
		intRects[3][i].top = hauteur * i;
		intRects[3][i].width = largeur;
		intRects[3][i].height = hauteur;
	}

	for (size_t i = 0; i < NBR_ANIMS_VICTOIRE; i++)
	{
		int largeur = texture.getSize().x / NBR_ANIMS_VICTOIRE;
		intRects[4][i].left = largeur * i;
		intRects[4][i].top = hauteur * i;
		intRects[4][i].width = largeur;
		intRects[4][i].height = hauteur;
	}


	setTextureRect(intRects[0][cadran]);
	setOrigin(intRects[0][0].height / 2, intRects[0][0].width / 2);*/
}

void Acteur::deplacement(bool direction)
{

	if (etat==DIRECTIONS::IMMOBILE)
	{
		if (animateur++ % SPEED_ANIMATION == 0)
		{
			setTextureRect(intRects[DIRECTIONS::IMMOBILE][0]);
		}
	}
}

inline bool Acteur::getState()
{
	return isDead;
}

void Acteur::setState(bool dead)
{
	isDead = dead;
}

